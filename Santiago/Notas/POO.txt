POO:

    *No olvidar el metodo main:
        public static void main (String [] args){
    *Variables locales ==> Estan dentro del metodo
    *Variables globales ==> Estan en los atributos       
            
    Metodos: 
        metodos ==> public *void* (o int o lo que devuelva) nombreMetodo (){

            Parametros: Es una declaracion de variables u objeto.
                Se ponen en los () de la declaracion del metodo
           
           
            Argumento: Es un valor que se envia
                Se ponen en los () de la invocacion del metodo

        *Variables locales ==> Estan dentro del metodo
        *Variables globales ==> Estan en los atributos       
    
        }
        }

        Retorno de valores: 

            Ejm1: 
            public *int* sumar (int a, int b){   //El metodo suma va a devolver un int
                int suma = a+b;   // Se crea la variable suma
                return suma;    // Aquí me devuelve, me retorna el valor entero de suma
            }
            int suma =objeto.sumar(5,4);  //Para poder imprimir el valor entero utilizo la variable entera "suma"

            Ejm2:
            public String saludar (String nombre){
                String saludo = "hola" +nombre;
                return saludo;
            }
            String saludo = objeto.saludo("Alejandro");
            System.out.println(saludo);

    Constructores: Metodos especialess que NO especifican que devulven algo.
    *No olvidar que si el mombre del parametro es el mismo nombre del atributo se utiliza this.algo
    *this.algo (Es el atributo) = algo (es el argumento del constructor)

    Sobrecarga de metodos:
        *Sobrecarga de contructor (Hay mas de un constructor, con distintos parametros)
        EJM:

            String nombre;
            int edad; 
            String dni;

            public Persona(String dni, int edad){  
                this.nombre = nombre;
                this.edad = edad;
            }

            public Persona (String dni){  //Sobrecarga de constructores... Tener en cuenta que sus parametros son distintos
                this.dni=dni;
            }

            public void correr (){
                System.out.prinln("Soy"+nombre+ ", tengo "+edad+ "años y estoy corriendo una maraton" );
            }

            public void correr (int km){    //Sobrecarga de metodos. Tener en cuenta que tiene distintos parametros (cantidad o tipo) ya que de esta forma java puede diferenciarlos
                System.out.prinln("He corrido "+ km+ " kilometros );
            }

    Modificadores de Acceso = 
        CODIGO:
            package paquete1;
            public class Clase1 {
                int atributo;   //Tiene un modificador de uso por defecto por lo que no especifico nada
            }
            package paquete1;
            public class Clase2{
                public static void main(String[] args){
                    Clase1 objeto1= new Clase1();

                    objeto1.atributo1=15;  //Al ser el atributo1 del objeto1 un atributo que tiene un modificador de uso por defecto, puedo acceder desde otra clase y modificar ese atributo
                }
            }

            package paquete2; //otro paquete
            import paquete1.Clase1;  //Importo la clase de otro paquete
            public class Clase3{
                public static void main (String[]args){
                    Objeto1.atributo1=15;  //Pondria error, ya que el atributo 1, tiene un modificador de uso que si bien permite acceder a el desde clases del mismo paquete, no plo permitiria 
                                           ante clases de distintos paquetes... Para que si se pudiera tocaria poner en el atributo de la Clase1:
                                                    *public* int atributo;
                        
                }
            }
        
        Modificador de Acceso PRIVATE: Restringe el atributo para que solo pueda ser utilizado por metodos de la misma clase. Ninguna otra clase puede acceder a el.

ENCAPSULAMIENTO: Se encarga de ocultar nuestros atributos o nuestros metodos.
    *Encapsula los datos para uqe cualquiera no pueda cambiar los datos.
    
    Metodos accesores ==> Setters y Getters 

        Set (Significa establecer en ingles) ==> Vamos a establecer un atributo para mi variable.

        CODIGO:
            
            public Clase1{
                private int edad;

                public void setEdad (int edad){   //Establece la edad que manda el usuario 
                    this.edad =edad;
                }
            }    

            ///Otra clase

            public Clase2{
                Clase1 objeto1 = new Clase1();

                objeto1.setEdad(10);   //Establece que edad valga 10
            }

        Get (Obtener) ==>Mostramos la variable

        CODIGO:

            public Clase1{
                private int edad;

                public void setEdad (int edad){   //Establece la edad que manda el usuario 
                    this.edad =edad;   //Mirar el this
                }

                public int getEdad(){
                    return edad;     //Mirar el return
                }
            }    

            ///Otra clase

            public Clase2{
                Clase1 objeto1 = new Clase1();

                objeto1.setEdad(10);   //Establece que edad valga 10
                System.out.println("La edad es: "+ objeto1.getEdad); //Imprimo la edad (NO puedo poner + edad, sino el metodo getter)
            }

CONSTANTES: Variables que nunca cambian
    *private final  String miCosita; 

MIEMBROS ESTATICOS DE CLASE: //Toca repasar
    Atributos:
        *private static String frase ="Primera frase"  //Ya el atributo no le pertenece al objeto sino a la clase... por lo tanto todo cambio que yo le haga a este atributo 
                                                        en cualquier objeto va a cambiar en la clase (cambiandole a todos los objetos).      
    Los metodos abstractos solo pueden ser implementados en clases abstractas
        Ya no se necesita crear objetos para llamar los atributos de la clase.      
    Metodos:
        *public static int sumar (int n1, int n2){   //Los metodos estaticos tambien le pertenece a la clase, no a los objetos
        }

ESTUDIAR METODOS DE TIPO OBJETO  

HERENCIA: Es una forma de reutilizacion de software
    *Clase Padre (Super Clase)  <|====  Clase Hija (Sub Clase)

        Ejemplo de heredar:
            public class (nombre hijo) *extends* (nombre Padre){
                private int codigoEstu;
                private float notaFinal;

                public Estudiante (String nombre, String apellido, float codigoEstu, float notaFinal){    //pongo los atributos de la clase padre y los propios

                    super(nombre,apellido); //inicializa lo que ya está inicializado en la clase padre
                    this.codigoEstu = codigoEstu;
                    this.notaFinal = notaFinal;
                }            

                *Los datos privados de la clase padre no pueden accederse desde la clase hija (los protected si permiten esto)
                
            }

Clases y Métodos Finales: Si le pongo final a una clase, esta no puede ser heredada... no puede tener "hijos"
                          Si le pongo un final a un método, no puede existir el mismo método en la clase que lo hereda.
                          Suele usarse para temas de seguridad.


Sobre Escritura de Miembros: NO es lo mismo que Sobrecarga de metodos (Los cualees están en la misma clase)
    Es cuando el mismo metodo está en distintas clases por la herencia, pero cada uno está especializado (Como comer para personas, perros y vacas.... Todos hijos de la clase animal que tiene comer un metodo comer :D)

    Toca poner la palabra @Override que significa sobreescribir


Clases y metodos abstractos: Una clase abstracta solo se usa como super clase y no se puede instanciar.
    Sirve para proporcionar una super clase apropiada a partir de la cuál heredan otras clases 
    Las clases que heredan de las clases abstractas están obligadas a sobreescribir los metodos abstractos de la clase padre.   (Usando el Override)    

Polimorfismo: La clase padre es compatible con los tipos detras de ella... pero no alreves
    Poli= "muchos"  ---- Morfismo= "formas"
    *Puedo instanciar un objeto de tipo clase Padre, asociandolo a la clase hija:
    Ejm:
        Vehiculo <|=== VehiculoTurismo

        Vehiculo miVehiculo = new Vehiculo ("12GB","Ferrari")
            referencia               instanciacion

        //Tambien puedo hacer esto

        Vehiculo miVehiculo2 = new VehiculoTurismo ("12GB","Ferrari","Rojo") //Otra forma que puede tomar un objeto. 
    *Se suele usar para cuando uno tiene un arreglo de objetos:
        Vehiculo misVehiculos []= new Vehiculo [4];

    **Conversion Ascendente de Tipos (Upcasting): Convertir un objeto de la subclase en un objeto de la superclase.

        
        Ejm:

            VehiculoTurismo miVehiculo = new VehiculoTurismo (4,"jv5","Ferrari")

            Vehiculo vehiculo = miVehiculo;

            System.out.println(vehiculo);  //Se imprime el objeto de la subclase aunque vehiculo sea de la superclase.


            //Seria lo mismo a escribirlo como en el polimorfismo así:

            Vehiculo vehiculo = new VehiculoTurismo (4,"jv5","Ferrari");
            System.out.println (vehiculo);

    **Conversion Descendiente de Tipos (DownCasting): Convertir un objeto de la clase padre en algun objeto de sus subclases (Necesita de un upcasting previo)

        Ejm:

            Vehiculo vehiculo = new VehiculoTurismo (4,"jv5","Ferrari");

            VehiculoTurismo nuevoVehiculo = (VehiculoTurismo) vehiculo ;

            System.out.println (nuevoVehiculo)   //Se imprime un objeto tipo vehiculoTransporte.

Arreglos Dinámicos:
    static ArrayList <Clase> nombre = new ArrayList<clase>;   //El arrayList es un arreglo dinámico, no toca indicar cuantos elementos debe tener

Herencia Multiple: Hace referencia a la caracteristica de los lenguajes de programacion orientados a objetos en la que una clase puede heredar atributos y metodos de mas de una superclase.
        *Una clase tiene mas de una superclase (No se puede hacer en java directamente)
Interfaces: (Hay un ejemplo en netBeans) Simula la herencia multiple en Java.
            * solo es public o default.   
            * todos sus metodos son abstractos.
            * todos sus atributos son final (Constantes).
            * Se comporta como una clase abstracta
            * Para heredar se coloca implments
            

            **Se recomienda usar cuando uno es experto en el tema y se quiere unir dos clases que no esten relacionadas directamente pero que tengan metodos parecidos.
